#pragma once

#include <iostream>

namespace bob {
  class LexerException {
  public:
    LexerException(const std::string& file_name) throw() : file_name(file_name) {}
    virtual std::string to_string() const {
      return "Error in file " + file_name;
    }
  protected:
    std::string file_name;
  };

  class FileNotFoundException : public LexerException {
  public:
    FileNotFoundException(const std::string& file_name) throw() : LexerException(file_name) {}
    std::string to_string() const {
      return file_name + " not found.";
    }
  };

  class TokenErrorException : public LexerException {
  public:
    TokenErrorException(const std::string& file_name, std::string& token, int line, int column) throw() : LexerException(file_name), token(token), line(line), column(column) {}
    std::string to_string() const {
      return file_name + " (" + std::to_string(line) + "," + std::to_string(column) + ") : unexpected token '" + token + "'";
    }
  private:
    std::string token;
    int line;
    int column;
  };
};
